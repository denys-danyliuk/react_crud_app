{"version":3,"sources":["utils/fetchClient.ts","api/posts.ts","components/PostCard/PostCard.tsx","components/TextField/TextField.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","method","data","options","body","JSON","stringify","headers","fetch","then","response","ok","Error","json","client","deletePost","postId","PostCard","post","onEdit","onDeletion","className","src","image","alt","title","text","href","target","rel","type","onClick","id","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","touched","setToched","hasError","htmlFor","classNames","placeholder","event","onBlur","App","posts","setPosts","count","setCount","setTitle","setText","setUrl","setImage","isEdited","setIsEdited","selectedPostId","setSelectedPostId","clearForm","handleSubmit","a","preventDefault","createdPost","prev","prevCount","handleEdit","postTitle","postDescription","postLink","postImgUrl","handleDeletion","prevPosts","filter","currentTodo","handleSaveAfterEdit","updatedPost","map","useEffect","onSubmit","disabled","trim","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a2c6a97.chunk.js","sourcesContent":["const BASE_URL = 'https://yourtestapi.com/api';\n\ntype RequestMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  put: <T>(url: string, data: any) => request<T>(url, 'PUT', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = () => {\n  return client.get<Post[]>('/posts');\n};\n\ntype preparedPost = Omit<Post, 'id'>;\n\nexport const createPost = (\n  data: preparedPost,\n) => {\n  return client.post<Post>('/posts', {\n    ...data,\n  });\n};\n\nexport const deletePost = (postId: number) => {\n  return client.delete(`/posts/${postId}`);\n};\n\nexport const updatePost = (postId: number, data: preparedPost) => {\n  return client.put<Post>(`/posts/${postId}`, data);\n};\n","import './PostCard.scss';\nimport { FC } from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  post: Post;\n  onEdit: (\n    postTitle: string,\n    postDescription: string,\n    postLink: string,\n    postImgUrl: string,\n    postId: number,\n  ) => void;\n  onDeletion: (postId: number) => void;\n};\n\nexport const PostCard: FC<Props> = ({ post, onEdit, onDeletion }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={post.image}\n          alt=\"Post\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{post.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {post.text}\n        <br />\n        <a\n          href={post.url}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Read more\n        </a>\n      </div>\n    </div>\n    <footer className=\"card-footer\">\n      <button\n        type=\"button\"\n        className=\"button is-fullwidth is-primary\"\n        onClick={() => onEdit(post.title, post.text, post.url, post.image, post.id)}\n      >\n        Edit\n      </button>\n      <button\n        type=\"button\"\n        className=\"button is-fullwidth is-danger\"\n        onClick={() => onDeletion(post.id)}\n      >\n        Delete\n      </button>\n    </footer>\n  </div>\n);\n","import classNames from 'classnames';\nimport { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { FormEvent, useEffect, useState } from 'react';\nimport {\n  createPost, deletePost, getPosts, updatePost,\n} from './api/posts';\nimport './App.scss';\nimport { PostCard } from './components/PostCard';\nimport { TextField } from './components/TextField';\nimport { Post } from './types/Post';\n\nexport const App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n  const [url, setUrl] = useState('');\n  const [image, setImage] = useState('');\n  const [isEdited, setIsEdited] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const clearForm = () => {\n    setTitle('');\n    setText('');\n    setUrl('');\n    setImage('');\n  };\n\n  const handleSubmit = async (event: FormEvent) => {\n    event.preventDefault();\n\n    const createdPost = await createPost({\n      title,\n      text,\n      url,\n      image: image || 'https://via.placeholder.com/360x270.png?text=no%20preview',\n    });\n\n    setPosts(prev => [...prev, createdPost]);\n\n    setCount(prevCount => prevCount + 1);\n    clearForm();\n  };\n\n  const handleEdit = (\n    postTitle: string,\n    postDescription: string,\n    postLink: string,\n    postImgUrl: string,\n    postId: number,\n  ) => {\n    setTitle(postTitle);\n    setText(postDescription);\n    setUrl(postLink);\n    setImage(postImgUrl);\n    setIsEdited(true);\n    setSelectedPostId(postId);\n  };\n\n  const handleDeletion = async (postId: number) => {\n    await deletePost(postId);\n    setPosts(prevPosts => prevPosts.filter(\n      currentTodo => currentTodo.id !== postId,\n    ));\n  };\n\n  const handleCancelEditing = () => {\n    setTitle('');\n    setText('');\n    setUrl('');\n    setImage('');\n    setIsEdited(false);\n  };\n\n  const handleSaveAfterEdit = async () => {\n    const updatedPost = await updatePost(selectedPostId, {\n      title, text, url, image,\n    });\n\n    setPosts(prev => prev.map(post => {\n      if (post.id === selectedPostId) {\n        return updatedPost;\n      }\n\n      return post;\n    }));\n\n    setIsEdited(false);\n    clearForm();\n    setCount(prev => prev + 1);\n  };\n\n  useEffect(() => {\n    getPosts()\n      .then(setPosts);\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <div className=\"posts\">\n          {posts.map(post => (\n            <PostCard\n              key={post.id}\n              post={post}\n              onDeletion={handleDeletion}\n              onEdit={handleEdit}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"sidebar\">\n        <form\n          className=\"NewMovie\"\n          onSubmit={handleSubmit}\n          key={count}\n        >\n          <h2 className=\"title\">Add a movie</h2>\n\n          <TextField\n            name=\"title\"\n            label=\"Title\"\n            value={title}\n            onChange={setTitle}\n            required\n          />\n\n          <TextField\n            name=\"text\"\n            label=\"Description\"\n            value={text}\n            onChange={setText}\n            required\n          />\n\n          <TextField\n            name=\"url\"\n            label=\"Post URL\"\n            value={url}\n            onChange={setUrl}\n            required\n          />\n\n          <TextField\n            name=\"imgURL\"\n            label=\"Img URL\"\n            value={image}\n            onChange={setImage}\n          />\n\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              {isEdited ? (\n                <>\n                  <button\n                    type=\"button\"\n                    className=\"button is-light is-success mr-3\"\n                    onClick={handleSaveAfterEdit}\n                  >\n                    Save\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"button is-light is-danger\"\n                    onClick={handleCancelEditing}\n                  >\n                    Cancel editing\n                  </button>\n                </>\n              ) : (\n                <button\n                  type=\"submit\"\n                  className=\"button is-link\"\n                  disabled={!title.trim() || !text.trim() || !url.trim()}\n                >\n                  Add\n                </button>\n              )}\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}